<head>
	<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
	<link href='https://cdn.jsdelivr.net/npm/boxicons@2.0.5/css/boxicons.min.css' rel='stylesheet'>
</head>

<h1 class="edit_title edit_font">New Wiki</h1>

<%#= render plain: params[:page].inspect %>
<%#= @page.errors[:title] if @page.present? %>

<div class="errors">
<% if @page.present? && @page.errors.any? %>
	<p><%= pluralize(@page.errors.count, "error") %> prevented this wiki from being saved:</p>
	<ul>
	<% @page.errors.full_messages.each do |msg| %>
		<li><%= msg %></li>
	<% end %>
	</ul>
<% end %>
</div>

<%= form_for :page, url: pages_path, html: { id: 'page_form' } do |f| %>
  <div class="form_group">
    <%= f.label :title, class: "form_label" %><br>
    <%= f.text_field :title, class: "text_field" %>
  </div>
  <div class="form_group">
    <%= hidden_field(:page, :user_id, value: current_user.id) %>
    <%= hidden_field(:page, :approval_status_id, value: PENDING) %>
		<%= hidden_field(:page, :last_user_edit, value: current_user.username) %>
		<%= hidden_field(:page, :page_publish_status_id, value: UNPUBLISHED) %>
  </div>
	<div class="form_group">
		<%= f.label 'Give a quick summary of what this wiki is about', class: 'form_label' %>
		<%= f.text_field :description, class: "text_field"%>
		</div>
	<div class="form_label form_group">
    <%= f.label :category %><br />
		<%#= collection_select :page, :category_id, Category.order(:id).where('category_id IS NULL'), :id, :name, {prompt: true}, {id: 'root'} %>

		<%= render 'category_select' %>


		<script>
			let div = document.getElementById('select_test');
			div.innerHTML = 'General Kenobi';
		</script>



	</div>

  <div class="form_group">
    <%#= f.label :content, class: "form_label" %>
      <div class="form-group">
      <%= f.hidden_field :content, :id => "post-content", required: true %>
      <div id="editor-container" hidden="true"></div>
      <div id="toolbar">
			<span class="ql-formats">
				<select class="ql-font">
					<option selected></option>
					<option value="serif"></option>
					<option value="monospace"></option>
				</select>
			</span>
			<span class="ql-formats">
				<select class="ql-size">
					<option value="small"></option>
					<option selected></option>
					<option value="large"></option>
					<option value="huge"></option>
				</select>
			</span>
			<span class="ql-formats">
				<button class="ql-header" value="1"></button>
				<button class="ql-header" value="2"></button>
				<button class="ql-blockquote"></button>
				<button class="ql-code-block"></button>
				<button class="ql-hr"><b>â€”</b></button>
				<%#<button class="ql-border"><b>BR</b></button>%>
			</span>
			<span class="ql-formats">
				<button class="ql-bold"></button>
				<button class="ql-italic"></button>
				<button class="ql-underline"></button>
				<button class="ql-strike"></button>
			</span>
			<span class="ql-formats">
				<button class="ql-list" value="ordered"></button>
				<button class="ql-list" value="bullet"></button>
				<button class="ql-indent" value="-1"></button>
				<button class="ql-indent" value="+1"></button>
			</span>
			<span class="ql-formats">
				<select class="ql-color">
				</select>
				<select class="ql-background">
				</select>
			</span>
			<span class="ql-formats">
				<button class="ql-link"></button>
				<button class="bx bx-image" type='button' onclick="showImageOptions()"></button>
				<button class="fa fa-play custom_video_button" type='button' onclick="showVideoOptions()"></button>
			</span>
			<span class="ql-formats">
				<button class="ql-clean"></button>
			</span>
			<span class="ql-formats">
				<button class="ql-align" value=""></button>
				<button class="ql-align" value="center"></button>
				<button class="ql-align" value="right"></button>
				<button class="ql-align" value="justify"></button>
			</span>
			<span>
				<button class="ql-image"></button>
			</span>
		</div>
      <div id="editor"></div>
    </div>
  </div>
	<div class="form_aside">
		<div class="form_group">
			<%= f.label "Wiki photo (optional)"%>
			<%= f.file_field :image, id: 'preview_upload' %>
			<img id="img_prev" src="#", class="hidden" style="width:20%; height:20%;"/>
		</div>
	</div>
  <div class="form_group">
    <%= f.submit "Submit for review", class: "link_button", data: { confirm: "Submit for review?"} %>
  </div>
<% end %>

<div class="image_options hidden clearfix">
	<div class="image_options_header">
		<h2>Insert image</h2>
		<button type='button' onclick="showImageOptions()">x</button>
	</div>
	<ul>
	<div class='radio_wrapper'>
	<% if @images.present? %>
		<%= render 'image_search' %>
	<div id="paginator">
		<%= paginate @images, remote: true %>
	</div>
		<div class="media_options_wrapper">
		<button type='button' id="image_button">Insert</button>
		<%= link_to 'Upload', new_image_path %>
	</div>
	<% end %>
	</div>
	</ul>
</div>

	<div class="video_options hidden clearfix">
	<h2>Insert a video</h2>
	<ul>
	<div class='radio_wrapper'>
	<% if @videos.present? %>
	<% @videos.each do |v| %>
	<li>
	
	<div class='radio_top'>
	<strong><%= v.name %></strong>
	</div>
	<%# Store video path in data for retrieval by jquery %>
	<div class='radio_bottom'>
	
	<label>
	
	<%= content_tag :input, type: 'radio', name: 'video', data: {video: Video.find(v.id).path, thumbnail: Video.find(v.id).image.video_path.url} do %>
	<% if v.image.video_path.present? %>
		<%# <div class="video_image_wrapper"> %>
		<%= image_tag(v.image.video_path.url, size: '196x111') %>
		<%# <box-icon class="video_preview_icon" size="96px" color="#656565" name='play'></box-icon>
		</div> %>
	<% else %>
		<%= image_tag(v.image.path.url, size: '196x111') %>
	<% end %>
	<%# '295.783x166.367' %>
	</label>
	<% end %>
	</div>
	</li>
	<% end %>
	<%= paginate @videos, params: { video: true } %>
		<div class="media_options_wrapper">
		<button type='button' id="video_button">Insert</button>
		<button type='button' onclick="showVideoOptions()">Cancel</button>
		<%= link_to 'Upload', new_video_path %>
	</div>
	<% end %>
	</div>
	</ul>
</div>


<script>
		function showVideoOptions() {
			let options = document.getElementsByClassName('video_options')[0];
			//options.className = options.className.replace('hidden', '');
			if (options.classList.contains('hidden')) {
				options.className = options.className.replace("hidden", "");
			} else {
				options.classList.add("hidden");
			}
		  
	}

	function showImageOptions() {
		let options = document.getElementsByClassName('image_options')[0];

		if (options.classList.contains('hidden')) {
			options.className = options.className.replace("hidden", "");
		} else {
			options.classList.add("hidden");
		}
	}

	setTimeout(window.onload = function() {
			if (findGetParameter('image')) {
				let options = document.getElementsByClassName('image_options')[0];
				options.className = options.className.replace("hidden", "");
			}
		}, 100);

	setTimeout(window.onload = function() {
			if (findGetParameter('video')) {
				let options = document.getElementsByClassName('video_options')[0];
				options.className = options.className.replace("hidden", "");
			}
		}, 100);

	function findGetParameter(parameterName) {
    var result = null,
        tmp = [];
    location.search
        .substr(1)
        .split("&")
        .forEach(function (item) {
          tmp = item.split("=");
          if (tmp[0] === parameterName) result = decodeURIComponent(tmp[1]);
        });
    return result;
	}

	function adjustWidth(slider) {
		let div = slider.parentElement;
		let sliderValue = slider.value;

		div.style.width = sliderValue + '%';
	}
</script>

<div id="snackbar"></div>

<!-- Initialize Quill editor -->
<script>
	function load() {


		let BlockEmbed = Quill.import('blots/block/embed');
		let Inline = Quill.import('blots/inline'); 
		class MarkBlot extends Inline { } 
		MarkBlot.blotName = 'mark'; 
		MarkBlot.tagName = 'mark'; 
		Quill.register(MarkBlot);

		
		let Delta = Quill.import('delta');
		let Embed = Quill.import('blots/block/embed');



		class Border extends Embed {

			static create(value) {
				let node = super.create(value);
				
			}
		}
		Border.blotName = 'border';
		Border.tagName = 'border';
		Quill.register(Border);

		var customBorderHandler = function() {
			var range = quill.getSelection();
			var selectedContent = quill.getContents(range.index, range.length);

			if (range) {
				quill.insertEmbed(range.index, 'border', "null");
			}
		}

		class HR extends Embed { 
			static create(value) {
					let node = super.create(value);
					// give it some margin
					node.setAttribute('style', "height:0px; margin-top:10px; margin-bottom:10px;");
					return node;
			}
		}
		HR.blotName = 'hr';
		HR.tagName = 'hr';
		Quill.register(HR);

		var customHrHandler = function(){
			// get the position of the cursor
			var range = quill.getSelection();
			if (range) {
					// insert the <hr> where the cursor is
					quill.insertEmbed(range.index,"hr","null");
			}
		}

		Quill.register({
			'formats/hr': HR
		});



	class ImageBlot extends BlockEmbed {
		static create(url) {
			let node = super.create();
			node.setAttribute('class', 'quill_image_container');
			let imgNode = document.createElement('img');
			imgNode.setAttribute('src', url);
			let sliderNode = document.createElement('input');
			sliderNode.setAttribute('type', 'range');
			sliderNode.setAttribute('min', '20');
			sliderNode.setAttribute('max', '100');
			sliderNode.setAttribute('value', '100')
			sliderNode.setAttribute('onchange', 'adjustWidth(this)');
			sliderNode.setAttribute('class', 'image_resize_slider');
			//imgNode.setAttribute('display', 'inline');
			node.appendChild(imgNode);
			//node.appendChild(sliderNode);

			return node;
		}

		// static value(domNode) {
		// 	return domNode.querySelector('img').getAttribute('src');
		// }

		static formats(node) {
			let format = {};
			if (node.hasAttribute('height')) {
				format.height = node.getAttribute('height');
			}
			if (node.hasAttribute('width')) {
				format.width = node.getAttribute('width');
			}
			return format;
		}

		static value(node) {
			return node.getAttribute('src');
		}

		format(name, value) {
			// Handle unregistered embed formats
			if (name === 'height' || name === 'width') {
				if (value) {
					this.domNode.setAttribute(name, value);
				} else {
					this.domNode.removeAttribute(name, value);
				}
			} else {
				super.format(name, value);
			}
		}
	}
	ImageBlot.blotName = 'custom-image';
	ImageBlot.tagName = 'div';
	Quill.register(ImageBlot);

	$('#image_button').click(function() {
		let range = quill.getSelection(true);
		quill.insertText(range.index, '\n', Quill.sources.USER);
		
		// Grab selected radio button by name. Return image path from database.
		//let url = $("input[name='image']:checked").data('image').url;
		let url = $("input[name='image']:checked").data('image').url;
		//quill.insertText(range.index, '<p>', Quill.sources.USER);
		quill.insertEmbed(range.index, 'custom-image', url, Quill.sources.USER);
		//quill.insertText(range.index, '</p>', Quill.sources.USER);
		//quill.formatText(range.index + 1, 1, { height: '360', width: '640' });
		quill.setSelection(range.index + 2, Quill.sources.SILENT);
		quill.insertText(range.index, '\n', Quill.sources.USER);
	});

	class VideoBlot extends BlockEmbed {
		static create(url) {
			let node = super.create();
			let thumbnail = $("input[name='video']:checked").data('thumbnail');
			node.setAttribute('src', url);
			// Set non-format related attributes with static values
			node.setAttribute('frameborder', '0');
			node.setAttribute('allowfullscreen', true);
			node.setAttribute('controls', 'controls');
			node.setAttribute('class', 'video-player');
			node.setAttribute('poster', thumbnail);

			return node;
		}

		static formats(node) {
			// We still need to report unregistered embed formats
			let format = {};
			if (node.hasAttribute('height')) {
				format.height = node.getAttribute('height');
			}
			if (node.hasAttribute('width')) {
				format.width = node.getAttribute('width');
			}
			return format;
		}

		static value(node) {
			return node.getAttribute('src');
		}

		format(name, value) {
			// Handle unregistered embed formats
			if (name === 'height' || name === 'width') {
				if (value) {
					this.domNode.setAttribute(name, value);
				} else {
					this.domNode.removeAttribute(name, value);
				}
			} else {
				super.format(name, value);
			}
		}
	}
	VideoBlot.blotName = 'db-video';
	VideoBlot.tagName = 'video';
	Quill.register(VideoBlot);


	$('#video_button').click(function() {
		let range = quill.getSelection(true);
		quill.insertText(range.index, '\n', Quill.sources.USER);
		
		// Grab selected radio button by name. Return video path from database.
		let url = $("input[name='video']:checked").data('video').url;
		quill.insertEmbed(range.index + 1, 'db-video', url, Quill.sources.USER);
		quill.formatText(range.index + 1, 1, { height: '360', width: '640' });
		quill.setSelection(range.index + 2, Quill.sources.SILENT);
	});


		var form = document.querySelector('#page_form');
		var quill = new Quill('#editor', {
			modules: {
				imageResize: {
					displaySize: true
				},
				toolbar: {
					container: '#toolbar',
					handlers: {
						'hr': customHrHandler,
						'border':customBorderHandler
					}
				}
			},
			theme: 'snow',
			placeholder: 'Compose your wiki here...'
		});

		// Store accumulated changes
		let change = new Delta();
		quill.on('text-change', function(delta) {
			change = change.compose(delta);
		});

		// Save periodically
		setInterval(function() {
			if (change.length() > 0) {
				console.log('Saving changes...', change);
				// Save the entire updated text to localStorage
				const data = JSON.stringify(quill.root.innerHTML);
				localStorage.setItem('storedText', data);
				change = new Delta();
			}
		}, 1000);

		// Check for unsaved data
		window.onbeforeunload = function() {
			if (change.length() > 0) {
				alert('There are unsaved changes. Are you sure you want to leave?');
			}
		}

		// Load saved contents
		setTimeout(window.onload = function() {
			var storedText = JSON.parse(localStorage.getItem('storedText'));
			
			if (editor !== null) $('.ql-editor').html(storedText);
		}, 500);



		// Submit text editor content to database.
		form.onsubmit = function() {
		var postContentInput = document.querySelector('#post-content');
		postContentInput.value = quill.root.innerHTML;

		// Clear saved wiki contents in local storage
		localStorage.clear();
	};


	$(function() {
		function readURL(input) {
		if (input.files && input.files[0]) {
			var reader = new FileReader();

			reader.onload = function (e) {
				$('#img_prev').attr('src', e.target.result);
			}
			reader.readAsDataURL(input.files[0]);
		}
	}

	$("#preview_upload").change(function(){
		$('#img_prev').removeClass('hidden');
		readURL(this);
		});
	});


}

document.addEventListener("turbolinks:load", load(), false);



</script>

