<h1 class="edit_title edit_font">New Wiki</h1>

<%#= render plain: params[:page].inspect %>
<%#= @page.errors[:title] if @page.present? %>

<div class="errors">
<% if @page.present? && @page.errors.any? %>
	<p><%= pluralize(@page.errors.count, "error") %> prevented this wiki from being saved:</p>
	<ul>
	<% @page.errors.full_messages.each do |msg| %>
		<li><%= msg %></li>
	<% end %>
	</ul>
<% end %>
</div>

<%= form_for :page, url: pages_path, html: { id: 'page_form' } do |f| %>
  <div class="form_group">
    <%= f.label :title, class: "form_label" %><br>
    <%= f.text_field :title, class: "text_field" %>
  </div>
  <div class="form_group">
    <%= hidden_field(:page, :user_id, value: current_user.id) %>
    <%= hidden_field(:page, :approval_status_id, value: PENDING) %>
		<%= hidden_field(:page, :last_user_edit, value: current_user.username) %>
  </div>
	<div class="form_group">
		<%= f.label 'Give a quick summary of what this wiki is about:', class: 'form_label' %>
		<%= f.text_field :description, class: "text_field"%>
		</div>
	<div class="form_label form_group">
    <%= f.label :category %><br />
		<%= collection_select :page, :category_id, Category.order(:id), :id, :name, prompt: true %>
	</div>
  <div class="form_group">
    <%#= f.label :content, class: "form_label" %>
      <div class="form-group">
      <%= f.hidden_field :content, :id => "post-content", required: true %>
      <div id="editor-container" hidden="true"></div>
      <div id="toolbar">
			<span class="ql-formats">
				<select class="ql-font">
					<option selected></option>
					<option value="serif"></option>
					<option value="monospace"></option>
				</select>
			</span>
			<span class="ql-formats">
				<select class="ql-size">
					<option value="small"></option>
					<option selected></option>
					<option value="large"></option>
					<option value="huge"></option>
				</select>
			</span>
			<span class="ql-formats">
				<button class="ql-header" value="1"></button>
				<button class="ql-header" value="2"></button>
				<button class="ql-blockquote"></button>
				<button class="ql-code-block"></button>
				<button class="ql-hr"><b>â€”</b></button>
				<button class="ql-border"><b>BR</b></button>
			</span>
			<span class="ql-formats">
				<button class="ql-bold"></button>
				<button class="ql-italic"></button>
				<button class="ql-underline"></button>
				<button class="ql-strike"></button>
			</span>
			<span class="ql-formats">
				<button class="ql-list" value="ordered"></button>
				<button class="ql-list" value="bullet"></button>
				<button class="ql-indent" value="-1"></button>
				<button class="ql-indent" value="+1"></button>
			</span>
			<span class="ql-formats">
				<button class="ql-direction" value="rtl"></button>
				<select class="ql-align">
					<option selected></option>
					<option value="center"></option>
					<option value="right"></option>
					<option value="justify"></option>
				</select>
			</span>
			<span class="ql-formats">
				<button class="ql-link"></button>
				<button class="ql-image"></button>
				<button class="ql-video"><button>
				<button id="video_button" class="ql-db-video">CV</button>
			</span>
			<span class="ql-formats">
				<button class="ql-clean"></button>
			</span>
		</div>
      <div id="editor"></div>
    </div>
  </div>
	<div class="form_aside">
		<div class="form_group">
			<%= f.label "Wiki photo (optional)"%>
			<%= f.file_field :image, id: 'preview_upload' %>
			<img id="img_prev" src="#", class="hidden" style="width:20%; height:20%;"/>
		</div>
	</div>
  <div class="form_group">
    <%= f.submit "Submit for review", class: "edit_button", html: { onClick: "showSnackbar()" }, data: { confirm: "Submit for review?"} %>
  </div>
<% end %>



<div class="video_options">
	<h2>Insert a video</h2>

</div>

<script>

</script>

<div id="snackbar"></div>

<script src="https://cdn.quilljs.com/1.3.6/quill.js"></script>

<%= javascript_include_tag 'image-resize.min.js' %>

<!-- Initialize Quill editor -->
<script type="module">
	function load() {

		let BlockEmbed = Quill.import('blots/block/embed');
		let Inline = Quill.import('blots/inline'); 
		class MarkBlot extends Inline { } 
		MarkBlot.blotName = 'mark'; 
		MarkBlot.tagName = 'mark'; 
		Quill.register(MarkBlot);

		
		let Delta = Quill.import('delta');
		let Embed = Quill.import('blots/block/embed');



		class Border extends Embed {

			static create(value) {
				let node = super.create(value);
				
			}
		}
		Border.blotName = 'border';
		Border.tagName = 'border';
		Quill.register(Border);

		var customBorderHandler = function() {
			var range = quill.getSelection();
			var selectedContent = quill.getContents(range.index, range.length);

			if (range) {
				quill.insertEmbed(range.index, 'border', "null");
			}
		}

		class HR extends Embed { 
			static create(value) {
					let node = super.create(value);
					// give it some margin
					node.setAttribute('style', "height:0px; margin-top:10px; margin-bottom:10px;");
					return node;
			}
		}
		HR.blotName = 'hr';
		HR.tagName = 'hr';
		Quill.register(HR);

		var customHrHandler = function(){
			// get the position of the cursor
			var range = quill.getSelection();
			if (range) {
					// insert the <hr> where the cursor is
					quill.insertEmbed(range.index,"hr","null");
			}
		}

		Quill.register({
			'formats/hr': HR
		});

		// // Custom font size module.
		// var Size = Quill.import('attributors/style/size');
		// Size.whitelist = ['14px', '16px', '18px', '24px'];
		// Quill.register(Size, true);
	class VideoBlot extends BlockEmbed {
		static create(url) {
			let node = super.create();
			node.setAttribute('src', url);
			// Set non-format related attributes with static values
			node.setAttribute('frameborder', '0');
			node.setAttribute('allowfullscreen', true);
			node.setAttribute('controls', 'controls');
			node.setAttribute('class', 'video-player');

			return node;
		}

		static formats(node) {
			// We still need to report unregistered embed formats
			let format = {};
			if (node.hasAttribute('height')) {
				format.height = node.getAttribute('height');
			}
			if (node.hasAttribute('width')) {
				format.width = node.getAttribute('width');
			}
			return format;
		}

		static value(node) {
			return node.getAttribute('src');
		}

		format(name, value) {
			// Handle unregistered embed formats
			if (name === 'height' || name === 'width') {
				if (value) {
					this.domNode.setAttribute(name, value);
				} else {
					this.domNode.removeAttribute(name, value);
				}
			} else {
				super.format(name, value);
			}
		}
	}
	VideoBlot.blotName = 'db-video';
	VideoBlot.tagName = 'video';
	Quill.register(VideoBlot);


	$('#video_button').click(function() {
		let range = quill.getSelection(true);
		quill.insertText(range.index, '\n', Quill.sources.USER);
		let url = "<%= Video.find(1).path %>";
		quill.insertEmbed(range.index + 1, 'db-video', url, Quill.sources.USER);
		quill.formatText(range.index + 1, 1, { height: '360', width: '640' });
		quill.setSelection(range.index + 2, Quill.sources.SILENT);
	});


		var form = document.querySelector('#page_form');
		var quill = new Quill('#editor', {
			modules: {
				imageResize: {
					displaySize: true
				},
				toolbar: {
					container: '#toolbar',
					handlers: {
						'hr': customHrHandler,
						'border':customBorderHandler
					}
				}
			},
			theme: 'snow',
			placeholder: 'Compose your wiki here...'
		});

				// Store accumulated changes
		let change = new Delta();
		quill.on('text-change', function(delta) {
			change = change.compose(delta);
		});

		// Save periodically
		setInterval(function() {
			if (change.length() > 0) {
				console.log('Saving changes...', change);
				// Save the entire updated text to localStorage
				const data = JSON.stringify(quill.root.innerHTML);
				localStorage.setItem('storedText', data);
				change = new Delta();
			}
		}, 3000);

		// Check for unsaved data
		window.onbeforeunload = function() {
			if (change.length() > 0) {
				alert('There are unsaved changes. Are you sure you want to leave?');
			}
		}

		// Load saved contents
		window.onload = function() {
			var storedText = JSON.parse(localStorage.getItem('storedText'));
			
			if (editor !== null) $('.ql-editor').html(storedText);
		}



		// Submit text editor content to database.
		form.onsubmit = function() {
		var postContentInput = document.querySelector('#post-content');
		postContentInput.value = quill.root.innerHTML;

		// Clear saved wiki contents in local storage
		localStorage.clear();
	};

}



	function showSnackbar() {
  var snackbar = document.getElementById("snackbar");
  snackbar.className = "show";
	snackbar.innerHTML = "Wiki submitted for review!"
  setTimeout(function(){ snackbar.className = snackbar.className.replace("show", ""); }, 3000);
}

$(function() {
function readURL(input) {
	if (input.files && input.files[0]) {
		var reader = new FileReader();

		reader.onload = function (e) {
			$('#img_prev').attr('src', e.target.result);
		}
		reader.readAsDataURL(input.files[0]);
	}
}

$("#preview_upload").change(function(){
	$('#img_prev').removeClass('hidden');
	readURL(this);
	});
});

document.addEventListener("DOMContentLoaded", load(), false);


</script>